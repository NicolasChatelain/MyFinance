@inject Portfolio portfolio

<MudDialog title="Add an expense">
    <DialogContent>
        <MudStack>
            <MudTextField @bind-Value="ExpenseAmountString" Label="Expense amount" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Euro" ErrorText="Input must be numeric" Error="_amountError"></MudTextField>
            <MudSelect @bind-Value="ExpenseTypeString" Variant="Variant.Outlined" Label="Expense type">
                @foreach (var type in Enum.GetNames(typeof(ExpenseType)))
                {
                    <MudSelectItem Value="type">@type</MudSelectItem>
                }
            </MudSelect>
            <MudDatePicker Class="py-3" @bind-date="_date" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    public string ExpenseAmountString { get; set; }
    public string ExpenseTypeString { get; set; }
    private DateTime? _date = DateTime.Today;

    private bool _amountError = false;


    private async Task Submit()
    {
        bool success = await portfolio.AddExpense(ExpenseAmountString, ExpenseTypeString, _date ?? DateTime.Today);
        if (success)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            _amountError = true;
        }

    }
    private void Cancel() => MudDialog.Cancel();
}
